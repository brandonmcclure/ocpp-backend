<div class="card mt-lg-3">
  <div class="card-header">
    Connection
  </div>
  <div class="card-body">
    <div class="row">
      <div class=col-lg-4>
          <label for="serial">Serial</label>
          <select id="serial" class="form-control" />
            <option value="">...</option>
            <%= Enum.map(chargers, fn c -> %>
              <option value="<%= c.serial %>"><%= c.serial %></optiom>
            <% end) %>
          </select>
      </div>
      <div class=col-lg-4>
        <label for="">host</label> 
        <select id="hostSelect" class="form-control">
          <option value='local_ex'>local elixir</option> 
          <option value='local_cn'>local CN</option> 
        </select>
      </div>
      <div class=col-lg-2>
        <label for="">Version</label> 
        <select id="versionSelect" class="form-control">
          <option value='ocpp1.6'>OCPP 1.6</option> 
          <option value='ocpp2.0'>OCPP 2.0</option> 
        </select>
      </div>
      <div class=col-lg-1>
            <button type="button" class="btn btn-primary" onclick="openSocket();" >Open</button>
      </div>
      <div class=col-lg-1>
            <button type="button" class="btn btn-primary" onclick="closeSocket();" >Close</button>
      </div>
    </div>
  </div>    
</div>
<div class="card mt-lg-3">
  <div class="card-header">
    Control
  </div>
  <div class="card-body">
    <div class="row">
      <div class=col-lg-8>
          <label for="messageSelect">Message</label>
          <select id="messageSelect" class="form-control" onchange="selectMessage();">
            <option value=''></option>
            <option value='[2, "42", "BootNotification", {"chargeBoxSerialNumber": "01234567", "chargePointModel":"Lolo4", "chargePointVendor":"NewMotion"}]'>BootNotification</option>
            <option value='[2, "42", "Heartbeat",{}]'>Heartbeat</option>
            <option value='[2, "42", "DataTransfer",{"vendorId":"MagnumCap","messageId":"StateOfCharge","data":"{\"meterValue\":42, \"transacionId\":23424}"}]'>DataTransfer</option>
            <option value='[2, "42", "StatusNotification",{"connectorId":1,"errorCode":"0","status":"Charging"}]'>StatusNotification</option>
            <option value='[2, "42", "Authorize", {"idTag":"01020304"}]'>Authorize</option>
            <option value='[2, "42", "StartTransaction", {"connectorId":1, "idTag":"01020304", "meterStart": 2000, "timestamp":"<%= Utils.datetime_as_string %>"}]'>StartTransaction</option>
            <option value='[2, "42", "StopTransaction", {"idTag":"01020304", "transactionId":"##TRNSID##", "meterStop": 2140, "timestamp":"<%= Utils.datetime_as_string %>"}]'>StopTransaction</option>
          </select>
      </div>
      <div class=col-lg-3>
      </div>
      <div class=col-lg-1>
        <button type="button" class="btn btn-primary" onclick="sendMessage();" >Send</button>
      </div>
    </div>
    <div class="row">
      <div class="col-lg-12 mt-lg-3" >
          <input size=120 type="text" id="messageinput"/>
      </div>
    </div>
  </div>
</div>
<div class="card mt-lg-3">
  <div class="card-header">
    Communication 
    <span class="d-inline-flex justify-content-end">
      <button type="button" class="btn btn-primary btn-sm" onclick="clearMessages();">clear</button>
    </span>
  </div>
  <div class="card-body">
        <div id="messages"></div>
  </div>
</div>
       
<script type="text/javascript">
               
  var webSocket;
  var messages = document.getElementById("messages");
 
  var transactionId = Math.round(new Date() / 1000);
 
  function openSocket(){
    // Ensures only one connection is open at a time
    if(webSocket !== undefined && webSocket.readyState !== WebSocket.CLOSED){
      write("WebSocket is already opened.");
      return;
    }
    serial = document.getElementById("serial").value;
    host = document.getElementById("hostSelect").value;
    version = document.getElementById("versionSelect").value;

    // Create a new instance of the websocket

    url = '';
    if (host == 'local_ex') {
      url = `ws://${serial}:abcdef1234abcdef1234abcdef1234abcdef1234@localhost:8383/ocppws/${serial}`;
    }
    if (host == 'local_cn') {
      url = `ws://127.0.0.1:8017/ocppws/${serial}`;
    }

    webSocket = new WebSocket(url, [version]);
    /**
     * Binds functions to the listeners for the websocket.
     */
    webSocket.onopen = function(event){
      write(`a ${version} connection is opened for ${serial} at ${host}`);
      // For reasons I can't determine, onopen gets called twice
      // and the first time event.data is undefined.
      // Leave a comment if you know the answer.
      if(event.data === undefined)
          return;
      write(event.data);
    };

    webSocket.onmessage = function(event){
        extractTransActionId(event.data);
        writeResponse(event.data);
    };

    webSocket.onclose = function(event){
        write("Connection closed");
    };
  }
 
  function extractTransActionId(data){
    response = JSON.parse(data)
    if (response[2].transactionId != undefined) {
      write(`found transactionId: ${response[2].transactionId}`)
      transactionId = response[2].transactionId
    }
  }

  /**
   * Sends the value of the text input to the server
   */
  function sendMessage(){
      var text = document.getElementById("messageinput").value;
      if (text == '') return;
      writeRequest(text);
      webSocket.send(text);
  }
 
  function closeSocket(){
      webSocket.close();
  }

  function write(text) {
      messages.innerHTML += "<br/>" + text;
  }

  function clearMessages() {
    messages.innerHTML = "";
  }

  function writeRequest(text){
      messages.innerHTML += "<br/>--&gt;:" + text;
  }

  function writeResponse(text){
      messages.innerHTML += "<br/>&lt;--:" + text;
  }
 
  function selectMessage() {
    var message = document.getElementById("messageSelect").value.replace(/##TRNSID##/g, transactionId);
    document.getElementById("messageinput").value = message;
    if (message.indexOf("StopTransaction") > 0) {
      transactionId += 1;
    }
  }
</script>